#include "imgui.h"
#include "imgui_impl_sdl.h"
#include <stdio.h>
#include <SDL2/SDL.h>
#include <SDL2/SDL_opengl.h>

void my(ImDrawData *d) {
    glMatrixMode(GL_MODELVIEW);
    glColor3f(1.0, 0.0, 0.0);
    glLoadIdentity();
    glBegin(GL_POLYGON);
        glVertex2i(100, 100);
        glVertex2i(100, 200);
        glVertex2i(200, 100);
        glVertex2i(200, 200);
    glEnd();
}


int main()
{
    if (SDL_Init(SDL_INIT_VIDEO|SDL_INIT_TIMER) != 0) {
        printf("Error: %s\n", SDL_GetError());
        return -1;
    }

    // SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);
    SDL_GL_SetAttribute(SDL_GL_DEPTH_SIZE, 24);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MAJOR_VERSION, 2);
    SDL_GL_SetAttribute(SDL_GL_CONTEXT_MINOR_VERSION, 1);
    SDL_DisplayMode current;
    SDL_GetCurrentDisplayMode(0, &current);
    SDL_Window *window = SDL_CreateWindow("ImGui SDL2+OpenGL example", SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, 1280, 720, SDL_WINDOW_OPENGL|SDL_WINDOW_RESIZABLE);
    SDL_GLContext glcontext = SDL_GL_CreateContext(window);

    ImGui_ImplSdl_Init(window);

    ImVec4 clear_color = ImColor(114, 144, 154, 0);

    // glEnable(GL_DEPTH_TEST); // Depth Testing
    // glDepthFunc(GL_LEQUAL);
    // glDisable(GL_CULL_FACE);
    // glCullFace(GL_BACK);

    // ImGui::GetIO().RenderDrawListsFn = my;
    glMatrixMode(GL_PROJECTION);
    glOrtho(0.0, 500.0, 0.0, 400, -1.0, 1.0);

    // Main loop
    bool done = false;
    while (!done) {

        SDL_Event event;
        while (SDL_PollEvent(&event)) {
            ImGui_ImplSdl_ProcessEvent(&event);
            if (event.type == SDL_QUIT)
                done = true;
        }

        ImGui_ImplSdl_NewFrame(window);

        ImGui::Begin("My Win");
            ImGui::Text("Testando aqui");
        ImGui::End();

        if (ImGui::BeginMainMenuBar()){
            if (ImGui::BeginMenu("Example")){
                ImGui::MenuItem("Sub", "OK");
                ImGui::EndMenu();
            }
            ImGui::EndMainMenuBar();
        }
        /*****
        static float f = 0.0f;
        ImGui::Text("Hello, world!");
        ImGui::SliderFloat("float", &f, 0.0f, 1.0f);
        ImGui::ColorEdit3("clear color", (float*)&clear_color);
        if (ImGui::Button("Test Window")) show_test_window ^= 1;
        if (ImGui::Button("Another Window")) show_another_window ^= 1;
        ImGui::Text("Application average %.3f ms/frame (%.1f FPS)", 1000.0f / ImGui::GetIO().Framerate, ImGui::GetIO().Framerate);
        ****/

        glViewport(0, 0, (int)ImGui::GetIO().DisplaySize.x, (int)ImGui::GetIO().DisplaySize.y);
        glClearColor(clear_color.x, clear_color.y, clear_color.z, clear_color.w);

        glClear(GL_COLOR_BUFFER_BIT);
        glMatrixMode(GL_MODELVIEW);

        //e.g. some polygons
        glDepthFunc(GL_ALWAYS);
        glPolygonMode(GL_FRONT, GL_FILL);
        glColor3f(1.0, 0.0, 0.0);
        glLoadIdentity();
        glBegin(GL_POLYGON);
            glVertex3i(100, 100, 0);
            glVertex3i(100, 200, 20);
            glVertex3i(200, 100, 200);
            glVertex3i(200, 200, 0);
        glEnd();

        glPushMatrix();
        glPushAttrib(GL_ALL_ATTRIB_BITS);
        ImGui::Render();
        glPopAttrib();
        glPopMatrix();

        SDL_GL_SwapWindow(window);
    }

    // Cleanup
    ImGui_ImplSdl_Shutdown();
    SDL_GL_DeleteContext(glcontext);
    SDL_DestroyWindow(window);
    SDL_Quit();

    return 0;
}

